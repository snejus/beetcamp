#!/bin/zsh
# Run tests across all test files, and report what has changed in a pretty way.
# Test metadata files are stored in $TEST_FILES_DIR (./jsons) directory: those
# are JSON files that contain Bandcamp release metadata.
#
# You can use 'url2json -s <release-url>' to create such testing file for your
# release of choice.
# It extracts the relevant metadata saves it in './jsons' directory under
# the filename that resembles that release URL (where slashes are replaced by
# underscores).

setopt extendedglob nullglob
zmodload zsh/mapfile
autoload -Uz zmv

TESTS_DIR=lib_tests

[[ -d .git/rebase-merge ]] || [[ $(git branch --show-current) == dev ]] || exit

commit=$(git show --no-patch --format='%h %s')
after=${${=commit}[1]}
message=${commit#$after }
if git diff --quiet HEAD~1..HEAD ./beetsplug; then
  print "$after: Source code has not changed, bye: $message"
  exit
fi

if [[ -d .git/rebase-merge ]]; then
  results=(${(f@)${mapfile[.git/rebase-merge/done]%$'\n'}})
  current_commit=(${=results[-1]})
  action=$current_commit[1]
  rebase_head=${current_commit[2]:0:7}

  if [[ $action =~ (fixup|squash) ]]; then
    print "Skipping commit rewrite: $message"
    exit
  fi
  if [[ -d $TESTS_DIR/$rebase_head ]]; then
    if [[ ! -s .git/rebase-merge/git-rebase-todo ]] && ( (( ${#${(M)${results}:#*(edit|fixup|squash)*}} )) || (( ! ${#${(M)${results}:#*reword*}} )) ); then
      print "Current (latest) commit, testing against REBASE_HEAD $rebase_head to synchronise results: $message"
      before=$rebase_head
    else
      zmv $TESTS_DIR/'(*)'$rebase_head $TESTS_DIR/'${1}'$after
      if git diff --quiet $rebase_head..$after ./beetsplug; then
        print "No source code changes in comparison to $rebase_head: $message"
        exit
      else
        print "Testing previous against new commit: $message"
      fi
    fi
  else
    print "Results from base commit $rebase_head do not exist, testing against last commit $before: $message"
  fi
else
  print "Testing previous against new commit: $message"
fi

(( $#before )) || {
  folders=(lib_tests/^[a-z]##(/:t))
  pat="^(${(j:|:)folders})"
  before=($(git log main~3..HEAD~ --format=%h ./beetsplug | grep -E $pat -m1))
}

git diff --quiet ./beetsplug
dirty_worktree=$?
(( dirty_worktree )) && git stash
./test_lib $before $after
(( dirty_worktree )) && git stash pop --quiet
