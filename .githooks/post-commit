#!/bin/zsh
# Run tests across all test files, and report what has changed in a pretty way.
# Test metadata files are stored in $TEST_FILES_DIR (./jsons) directory: those
# are JSON files that contain Bandcamp release metadata.
#
# You can use 'url2json -s <release-url>' to create such testing file for your
# release of choice.
# It extracts the relevant metadata saves it in './jsons' directory under
# the filename that resembles that release URL (where slashes are replaced by
# underscores).

setopt extendedglob nullglob
zmodload zsh/mapfile
autoload -Uz zmv

TESTS_DIR=lib_tests
SOURCE=(./beetsplug/*/^(http|__init__).py)

([[ -d .git/rebase-merge ]] && [[ $mapfile[.git/rebase-merge/head-name] == */dev* ]]) || [[ $(git branch --show-current) == dev ]] || exit

commit=$(git show --no-patch --format='%h %s')
after=${${=commit}[1]}
message=${commit#$after }
print -Pn "%B$message%b: "
if git diff --quiet HEAD~1..HEAD $SOURCE; then
  print "$after: Source code has not changed, bye"
  exit
fi

if [[ ! -d .git/rebase-merge ]]; then
  print "Testing new commit"
else
  tasks=(${(f@)${mapfile[.git/rebase-merge/done]%$'\n'}})
  current_task=(${=tasks[-1]})
  action=$current_task[1]
  rebase_head=${current_task[2]:0:8}

  if [[ $action =~ (fixup|squash) ]]; then
    print "Skipping commit rewrite"
    exit
  fi
  if [[ -d $TESTS_DIR/$rebase_head ]]; then
    if [[ ! -s .git/rebase-merge/git-rebase-todo ]] && (( ${#${(M)${tasks}:#*(edit|fixup|squash)*}} || ! ${#${(M)${tasks}:#*reword*}} )); then
      print "Current (latest) commit, testing against REBASE_HEAD $rebase_head to synchronise results"
      before=$rebase_head
    else
      zmv $TESTS_DIR/'(*)'$rebase_head $TESTS_DIR/'${1}'$after
      if git diff --quiet $rebase_head..$after $SOURCE; then
        print "No source code changes in comparison to $rebase_head"
        exit
      else
        print "Testing updated commit $after against the last commit"
      fi
    fi
  else
    print "Results from base commit $rebase_head do not exist, testing against last commit: $before"
  fi
fi

(( $#before )) || {
  folders=(lib_tests/^[a-z]##(/:t))
  before=$(git log main~3..HEAD~ --format=%h $SOURCE | grep -E "^(${(j:|:)folders})" -m1)
  : ${before:=main}
}

git diff --quiet $SOURCE
dirty_worktree=$?
(( dirty_worktree )) && git stash
./test_lib $before $after
(( $#rebase_head )) && [[ -d $TESTS_DIR/$rebase_head ]] && rm -r $TESTS_DIR/*$rebase_head
(( dirty_worktree )) && git stash pop --quiet
