#!/bin/bash

TESTS_DIR=lib_tests

[ "$(git branch --show-current)" = dev ] || exit

commit=$(git rev-parse --short HEAD)
previous_commit=$(git rev-parse --short HEAD~1)

[[ -e $TESTS_DIR/$previous_commit ]] || exit

git diff --quiet HEAD~1..HEAD ./beetsplug
committed_source_code=$?
git diff --quiet ./beetsplug
dirty_worktree=$?

if ((!committed_source_code)); then
  cp -r "$TESTS_DIR/$previous_commit" "$TESTS_DIR/$commit"
  cp "$TESTS_DIR/album-$previous_commit" "$TESTS_DIR/album-$commit"
  cp "$TESTS_DIR/tracks-$previous_commit" "$TESTS_DIR/tracks-$commit"
  exit
fi

cp -r "$TESTS_DIR/$previous_commit" "$TESTS_DIR/$commit"
((dirty_worktree)) && git stash
pytest -p no:randomly -k 'lib and file' -s -n 4 --base "$previous_commit" --target "$commit"
((dirty_worktree)) && git stash pop

jq '[(input_filename | sub(".*/"; "")), if .name then {before: .} else {after: .} end]' jsons/* "$TESTS_DIR/$commit"/*.json |
  jq -s '
    group_by(.[0]) | 
    map(
      [.[][1]] | 
      add | 
      select(.after.album) | 
      "\(.before.name) -> \(.after.album)"
    ) | 
    sort | 
    unique[]' -r >"$TESTS_DIR/album-$commit"
jq '(.tracks//[]) | map(if .track_alt then "\(.track_alt). " else "" end + .artist + " - " + .title)[]' "$TESTS_DIR/$commit"/*.json -r >"$TESTS_DIR/tracks-$commit"

git diff --unified=0 --no-index --color-words "$TESTS_DIR/album-$previous_commit" "$TESTS_DIR/album-$commit"
git diff --unified=0 --no-index --color-words "$TESTS_DIR/tracks-$previous_commit" "$TESTS_DIR/tracks-$commit"
